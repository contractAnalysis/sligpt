{
    "SafeMath": {
        "name": "SafeMath",
        "abstract": false,
        "fullyImplemented": true,
        "baseContracts": [],
        "dependencies": [],
        "libraries": {},
        "linearizedBaseContracts": [
            "deposit"
        ],
        "code": "library SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}"
    },
    "Ownable": {
        "name": "Ownable",
        "abstract": false,
        "fullyImplemented": true,
        "baseContracts": [],
        "dependencies": [],
        "libraries": {},
        "linearizedBaseContracts": [
            "name"
        ],
        "code": "contract Ownable {\n  address public owner;\n  address payable public ownerpayable;\n  constructor() public {\n    owner = msg.sender;\n    ownerpayable = msg.sender;\n  }\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    owner = newOwner;\n  }\n}"
    },
    "Token": {
        "name": "Token",
        "abstract": false,
        "fullyImplemented": false,
        "baseContracts": [],
        "dependencies": [],
        "libraries": {},
        "linearizedBaseContracts": [
            "Token"
        ],
        "code": "interface Token {\n  function transfer(address _to, uint256 _value) external returns (bool);\n  function balanceOf(address _owner) external view returns (uint256 balance);\n}"
    },
    "SirotTokenICO": {
        "name": "SirotTokenICO",
        "abstract": false,
        "fullyImplemented": true,
        "baseContracts": [
            "Ownable"
        ],
        "dependencies": [
            "Ownable",
            "SafeMath",
            "Token"
        ],
        "libraries": {
            "uint256": "SafeMath"
        },
        "linearizedBaseContracts": [
            "_spender",
            "name"
        ],
        "code": "contract SirotTokenICO is Ownable {\n  using SafeMath for uint256;\n  Token token;\n  string public constant Info = \"Do not call buyTokens directly. Use sale.sirottoken.com\";\n  uint256 public constant RATE = 125000;\n  uint256 public constant CAP = 500;\n  uint256 public constant START = 1593705081; \n  uint256 public constant DAYS = 92;\n  uint256 public constant initialTokens = 50000000 * 10**18;\n  bool public initialized = false;\n  uint256 public raisedAmount = 0;\n  event BoughtTokens(address indexed to, uint256 value);\n  modifier whenSaleIsActive() {\n    assert(isActive());\n    _;\n  }\n  constructor() public {\n      address _tokenAddr = 0x5eA0F26b81DC67d2463020614650d9325C8adbE7;\n      token = Token(_tokenAddr);\n  }\n  function initialize() public onlyOwner {\n      require(initialized == false);\n      require(tokensAvailable() == initialTokens);\n      initialized = true;\n  }\n  function isActive() public view returns (bool) {\n    return (\n        initialized == true &&\n        now >= START &&\n        now <= START.add(DAYS * 1 days) &&\n        goalReached() == false\n    );\n  }\n  function goalReached() public view returns (bool) {\n    return (raisedAmount >= CAP * 1 ether);\n  }\n  fallback () external payable {\n    buyTokens();\n  }\n  receive() external payable {\n    buyTokens();\n  }\n  function buyTokens() public payable whenSaleIsActive {\n    require(msg.value > 0);\n    uint256 weiAmount = msg.value;\n    uint256 tokens = weiAmount.mul(RATE);\n    emit BoughtTokens(msg.sender, tokens);\n    raisedAmount = raisedAmount.add(msg.value);\n    token.transfer(msg.sender, tokens);\n    ownerpayable.transfer(msg.value);\n  }\n  function tokensAvailable() public view returns (uint256) {\n    return token.balanceOf(address(this));\n  }\n  function destroy() onlyOwner public {\n    uint256 balance = token.balanceOf(address(this));\n    assert(balance > 0);\n    token.transfer(owner, balance); \n    selfdestruct(ownerpayable);\n  }\n}"
    }
}