{
    "EIP20Interface": {
        "name": "EIP20Interface",
        "abstract": false,
        "fullyImplemented": false,
        "baseContracts": [],
        "dependencies": [],
        "libraries": {},
        "linearizedBaseContracts": [
            "_value"
        ],
        "code": "contract EIP20Interface {\n    uint256 public totalSupply;\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}"
    },
    "ERC20Latte": {
        "name": "ERC20Latte",
        "abstract": false,
        "fullyImplemented": true,
        "baseContracts": [
            "EIP20Interface"
        ],
        "dependencies": [
            "EIP20Interface"
        ],
        "libraries": {},
        "linearizedBaseContracts": [
            "_value"
        ],
        "code": "contract ERC20Latte is EIP20Interface {\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowed;\n    string public name;                   \n    uint8 public decimals;                \n    string public symbol;                 \n    constructor(address _manager,  uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol\n    ) public {\n        balances[_manager] = _initialAmount;               \n        totalSupply = _initialAmount;                        \n        name = _tokenName;                                   \n        decimals = _decimalUnits;                            \n        symbol = _tokenSymbol;                               \n    }\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value); \n        return true;\n    }\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        uint256 allowance = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowance >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (allowance < MAX_UINT256) {\n            allowed[_from][msg.sender] -= _value;\n        }\n        emit Transfer(_from, _to, _value); \n        return true;\n    }\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value); \n        return true;\n    }\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}"
    }
}